{"version":3,"sources":["components/BlockHeight.tsx","components/MarketPrice.tsx","components/TransactionCount.tsx","components/HashRate.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BlockHeightContainer","styled","div","_templateObject","_taggedTemplateLiteral","BlockHeightValue","_templateObject2","BlockHeight","blockHeight","setBlockHeight","useState","useEffect","fetchBlockHeight","async","response","axios","get","console","log","data","block_height","error","interval","setInterval","clearInterval","_jsx","children","MarketPrice","marketPrice","setMarketPrice","timestamps","setTimestamps","fetchMarketPrice","prev","market_price","Date","toLocaleTimeString","labels","datasets","label","borderColor","backgroundColor","_jsxs","Line","TransactionCountContainer","TransactionCountValue","TransactionCount","transactionCount","setTransactionCount","fetchTransactionCount","transaction_count","HashRateContainer","HashRateValue","Title","h2","_templateObject3","formatHashRate","hashRate","concat","toFixed","HashRate","setHashRate","fetchHashRate","hash_rate","Container","h1","Section","Card","_templateObject4","ChartTitle","_templateObject5","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f98e06c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nconst BlockHeightContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst BlockHeightValue = styled.div`\n  font-size: 2.5rem;\n  font-weight: bold;\n  margin-top: 10px;\n`;\n\nconst BlockHeight: React.FC = () => {\n  const [blockHeight, setBlockHeight] = useState<number | null>(null);\n\n  useEffect(() => {\n    const fetchBlockHeight = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/api/block-height');\n        console.log('Fetched block height response:', response.data);\n        setBlockHeight(response.data.block_height);\n      } catch (error) {\n        console.error('Error fetching block height:', error);\n      }\n    };\n\n    fetchBlockHeight();\n    const interval = setInterval(fetchBlockHeight, 10000); // Refresh every 10 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <BlockHeightContainer>\n      {blockHeight !== null ? (\n        <BlockHeightValue>{blockHeight}</BlockHeightValue>\n      ) : (\n        <div>Loading...</div>\n      )}\n    </BlockHeightContainer>\n  );\n};\n\nexport default BlockHeight;\n","// frontend/src/components/MarketPrice.tsx\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\n\nconst MarketPrice: React.FC = () => {\n  const [marketPrice, setMarketPrice] = useState<number[]>([]);\n  const [timestamps, setTimestamps] = useState<string[]>([]);\n\n  useEffect(() => {\n    const fetchMarketPrice = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/api/market-price');\n        setMarketPrice(prev => [...prev, response.data.market_price]);\n        setTimestamps(prev => [...prev, new Date().toLocaleTimeString()]);\n      } catch (error) {\n        console.error('Error fetching market price:', error);\n      }\n    };\n\n    const interval = setInterval(fetchMarketPrice, 5000);\n    fetchMarketPrice(); // Fetch initial data\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const data = {\n    labels: timestamps,\n    datasets: [\n      {\n        label: 'Market Price (USD)',\n        data: marketPrice,\n        borderColor: 'rgba(75,192,192,1)',\n        backgroundColor: 'rgba(75,192,192,0.2)',\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <h2>Market Price</h2>\n      <Line data={data} />\n    </div>\n  );\n};\n\nexport default MarketPrice;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nconst TransactionCountContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst TransactionCountValue = styled.div`\n  font-size: 2.5rem;\n  font-weight: bold;\n  margin-top: 10px;\n`;\n\nconst TransactionCount: React.FC = () => {\n  const [transactionCount, setTransactionCount] = useState<number | null>(null);\n\n  useEffect(() => {\n    const fetchTransactionCount = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/api/transaction-count');\n        setTransactionCount(response.data.transaction_count);\n      } catch (error) {\n        console.error('Error fetching transaction count:', error);\n      }\n    };\n\n    fetchTransactionCount();\n    const interval = setInterval(fetchTransactionCount, 10000); // Refresh every 10 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <TransactionCountContainer>\n      {transactionCount !== null ? (\n        <TransactionCountValue>{transactionCount}</TransactionCountValue>\n      ) : (\n        <div>Loading...</div>\n      )}\n    </TransactionCountContainer>\n  );\n};\n\nexport default TransactionCount;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nconst HashRateContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #1e1e1e;\n  padding: 20px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n`;\n\nconst HashRateValue = styled.div`\n  font-size: 2.5rem;\n  font-weight: bold;\n  color: #00ff00;\n  margin-top: 10px;\n`;\n\nconst Title = styled.h2`\n  color: #ffffff;\n  font-size: 1.5rem;\n`;\n\nconst formatHashRate = (hashRate: number) => {\n  if (hashRate >= 1e18) {\n    return `${(hashRate / 1e18).toFixed(2)} EH/s`;\n  } else if (hashRate >= 1e12) {\n    return `${(hashRate / 1e12).toFixed(2)} TH/s`;\n  } else if (hashRate >= 1e9) {\n    return `${(hashRate / 1e9).toFixed(2)} GH/s`;\n  } else if (hashRate >= 1e6) {\n    return `${(hashRate / 1e6).toFixed(2)} MH/s`;\n  } else {\n    return `${hashRate} H/s`;\n  }\n};\n\nconst HashRate: React.FC = () => {\n  const [hashRate, setHashRate] = useState<number | null>(null);\n\n  useEffect(() => {\n    const fetchHashRate = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/api/hash-rate');\n        console.log('Fetched hash rate response:', response.data);\n        setHashRate(response.data.hash_rate);\n      } catch (error) {\n        console.error('Error fetching hash rate:', error);\n      }\n    };\n\n    fetchHashRate();\n    const interval = setInterval(fetchHashRate, 10000); // Refresh every 10 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <HashRateContainer>\n      <Title>Hash Rate</Title>\n      {hashRate !== null ? (\n        <HashRateValue>{formatHashRate(hashRate)}</HashRateValue>\n      ) : (\n        <div>Loading...</div>\n      )}\n    </HashRateContainer>\n  );\n};\n\nexport default HashRate;\n","import React from 'react';\nimport styled from 'styled-components';\nimport BlockHeight from './components/BlockHeight';\nimport MarketPrice from './components/MarketPrice';\nimport TransactionCount from './components/TransactionCount';\nimport HashRate from './components/HashRate';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  background-color: #1a1a1a;\n  color: #fff;\n  min-height: 100vh;\n`;\n\nconst Title = styled.h1`\n  font-size: 3rem;\n  margin-bottom: 20px;\n`;\n\nconst Section = styled.div`\n  width: 80%;\n  max-width: 1200px;\n  margin-bottom: 40px;\n`;\n\nconst Card = styled.div`\n  background: #2c2c2c;\n  border-radius: 10px;\n  padding: 20px;\n  margin-bottom: 20px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n`;\n\nconst ChartTitle = styled.h2`\n  font-size: 2rem;\n  margin-bottom: 10px;\n`;\n\nconst App: React.FC = () => {\n  return (\n    <Container>\n      <Title>Bitcoin Explorer</Title>\n      <Section>\n        <Card>\n          <ChartTitle>Current Block Height</ChartTitle>\n          <BlockHeight />\n        </Card>\n        <Card>\n          <ChartTitle>Market Price</ChartTitle>\n          <MarketPrice />\n        </Card>\n        <Card>\n          <ChartTitle>Transaction Count</ChartTitle>\n          <TransactionCount />\n        </Card>\n        <Card>\n          <ChartTitle>Hash Rate</ChartTitle>\n          <HashRate />\n        </Card>\n      </Section>\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}